name: Dev Pipeline - Test, Build, Deploy (Staging)

on:
  push:
    branches: [ "dev" ]
  workflow_dispatch:

env:
  RG_NAME: sit722-rg
  AKS_NAME: sit722aks01
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: latest

jobs:
  test_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          pip install --upgrade pip pytest httpx
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
      - name: Run tests - product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q
      - name: Run tests - order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push:
    runs-on: ubuntu-latest
    needs: test_backends
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: ACR login
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}
      - name: Build & push Product Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ./backend/product_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
      - name: Build & push Order Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ./backend/order_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

  deploy_backend:
    runs-on: ubuntu-latest
    needs: build_and_push
    outputs:
      PRODUCT_IP: ${{ steps.prod_ip.outputs.ip }}
      ORDER_IP: ${{ steps.order_ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v4
      - run: az aks get-credentials --resource-group ${{ env.RG_NAME }} --name ${{ env.AKS_NAME }} --overwrite-existing
      - run: |
          kubectl apply -f week08/k8s/configmaps.yaml
          kubectl apply -f week08/k8s/secrets.yaml
          kubectl apply -f week08/k8s/product-service.yaml
          kubectl apply -f week08/k8s/order-service.yaml
      - id: prod_ip
        run: |
          ip=""
          for i in {1..60}; do
            ip=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$ip" ]; then echo "ip=$ip" >> $GITHUB_OUTPUT; exit 0; fi
            sleep 5
          done
          exit 1
      - id: order_ip
        run: |
          ip=""
          for i in {1..60}; do
            ip=$(kubectl get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$ip" ]; then echo "ip=$ip" >> $GITHUB_OUTPUT; exit 0; fi
            sleep 5
          done
          exit 1

  build_and_push_frontend:
    runs-on: ubuntu-latest
    needs: deploy_backend
    env:
      PRODUCT_API: http://${{ needs.deploy_backend.outputs.PRODUCT_IP }}:8000
      ORDER_API: http://${{ needs.deploy_backend.outputs.ORDER_IP }}:8001
    steps:
      - uses: actions/checkout@v4
      - run: |
          sed -i "s|_PRODUCT_API_URL_|${PRODUCT_API}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORDER_API}|g" frontend/main.js
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}
      - run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

  deploy_frontend:
    runs-on: ubuntu-latest
    needs: build_and_push_frontend
    steps:
      - uses: actions/checkout@v4
      - run: az aks get-credentials --resource-group ${{ env.RG_NAME }} --name ${{ env.AKS_NAME }} --overwrite-existing
      - run: kubectl apply -f week08/k8s/frontend.yaml
