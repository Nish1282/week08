name: Dev Pipeline - Full E2E Deploy

on:
  push:
    branches:
      - dev
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: sit722acr02.azurecr.io
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # 1. Run backend tests
  test_backend:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        run: pytest tests --maxfail=1 --disable-warnings -q
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      - name: Run order_service tests
        working-directory: backend/order_service
        run: pytest tests --maxfail=1 --disable-warnings -q
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

  # 2. Build & push backend images
  build_backend:
    runs-on: ubuntu-latest
    needs: test_backend
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: az acr login --name sit722acr02

      - name: Build & push Product Service
        run: |
          docker build -t sit722acr02.azurecr.io/product_service:latest ./backend/product_service
          docker push sit722acr02.azurecr.io/product_service:latest

      - name: Build & push Order Service
        run: |
          docker build -t sit722acr02.azurecr.io/order_service:latest ./backend/order_service
          docker push sit722acr02.azurecr.io/order_service:latest

  # 3. Deploy backend to AKS
  deploy_backend:
    runs-on: ubuntu-latest
    needs: build_backend
    outputs:
      PRODUCT_IP: ${{ steps.get_ips.outputs.product }}
      ORDER_IP: ${{ steps.get_ips.outputs.order }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group sit722-rg \
            --name sit722aks01 \
            --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update \
            --resource-group sit722-rg \
            --name sit722aks01 \
            --attach-acr sit722acr02

      - name: Deploy backend manifests
        run: |
          kubectl apply -f week08/k8s/configmaps.yaml --validate=false
          kubectl apply -f week08/k8s/secrets.yaml --validate=false
          kubectl apply -f week08/k8s/product-service.yaml --validate=false
          kubectl apply -f week08/k8s/order-service.yaml --validate=false

      - name: Wait for backend IPs
        id: get_ips
        run: |
          echo "Waiting for external IPs..."
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            ORDER_IP=$(kubectl get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Product IP: $PRODUCT_IP"
              echo "Order IP: $ORDER_IP"
              echo "product=$PRODUCT_IP" >> $GITHUB_OUTPUT
              echo "order=$ORDER_IP" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 5
          done
          echo "Error: Backend IPs not assigned"
          exit 1

  # 4. Build & deploy frontend
  deploy_frontend:
    runs-on: ubuntu-latest
    needs: deploy_backend
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials   # ✅ FIX
        run: |
          az aks get-credentials \
            --resource-group sit722-rg \
            --name sit722aks01 \
            --overwrite-existing

      - name: Login to ACR
        run: az acr login --name sit722acr02

      - name: Inject backend IPs into frontend
        run: |
          sed -i "s|_PRODUCT_API_URL_|http://${{ needs.deploy_backend.outputs.PRODUCT_IP }}:8000|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|http://${{ needs.deploy_backend.outputs.ORDER_IP }}:8001|g" frontend/main.js
          cat frontend/main.js

      - name: Build & push frontend
        run: |
          docker build -t sit722acr02.azurecr.io/frontend:latest ./frontend
          docker push sit722acr02.azurecr.io/frontend:latest

      - name: Deploy frontend to AKS
        run: kubectl apply -f week08/k8s/frontend.yaml --validate=false   # ✅ FIX

      - name: Check frontend service IP
        run: |
          echo "Waiting for frontend IP..."
          for i in {1..30}; do
            FRONTEND_IP=$(kubectl get svc frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            if [[ -n "$FRONTEND_IP" ]]; then
              echo "Frontend available at: http://$FRONTEND_IP"
              exit 0
            fi
            sleep 5
          done
          echo "Frontend IP not assigned yet."
